# This is a basic workflow to help you get started with Actions

name: Deploy-Terraform

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches:
      - main
    paths:
      - 'terraform/**'  # Only run this workflow for changes in the terraform directory
  workflow_dispatch:  # Allows manual triggering of the workflow

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  TF_VAR_acr_server: ${{ secrets.TF_VAR_acr_server }}
  TF_VAR_acr_username: ${{ secrets.TF_VAR_acr_username }}
  TF_VAR_acr_password: ${{ secrets.TF_VAR_acr_password }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  powershell-linter:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a set of commands using the runners shell
      - name: Run Terraform provisioning
        run: |
          # Initialize Terraform
          terraform init

          # Validate Terraform configuration
          terraform validate

          # Plan the deployment
          terraform plan -out=tfplan

          # Apply the planned changes
          terraform apply -auto-approve tfplan